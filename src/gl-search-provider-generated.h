/*
 * Generated by gdbus-codegen 2.48.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GL_SEARCH_PROVIDER_GENERATED_H__
#define __GL_SEARCH_PROVIDER_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.SearchProvider2 */

#define LOGS_TYPE_SHELL_SEARCH_PROVIDER2 (logs_shell_search_provider2_get_type ())
#define LOGS_SHELL_SEARCH_PROVIDER2(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2, LogsShellSearchProvider2))
#define LOGS_IS_SHELL_SEARCH_PROVIDER2(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2))
#define LOGS_SHELL_SEARCH_PROVIDER2_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2, LogsShellSearchProvider2Iface))

struct _LogsShellSearchProvider2;
typedef struct _LogsShellSearchProvider2 LogsShellSearchProvider2;
typedef struct _LogsShellSearchProvider2Iface LogsShellSearchProvider2Iface;

struct _LogsShellSearchProvider2Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_activate_result) (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Result,
    const gchar *const *arg_Terms,
    guint arg_Timestamp);

  gboolean (*handle_get_initial_result_set) (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_Terms);

  gboolean (*handle_get_result_metas) (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_Results);

  gboolean (*handle_get_subsearch_result_set) (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_PreviousResults,
    const gchar *const *arg_Terms);

  gboolean (*handle_launch_search) (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_Terms,
    guint arg_Timestamp);

};

GType logs_shell_search_provider2_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *logs_shell_search_provider2_interface_info (void);
guint logs_shell_search_provider2_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void logs_shell_search_provider2_complete_get_initial_result_set (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *Results);

void logs_shell_search_provider2_complete_get_subsearch_result_set (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *Results);

void logs_shell_search_provider2_complete_get_result_metas (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation,
    GVariant *Metas);

void logs_shell_search_provider2_complete_activate_result (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation);

void logs_shell_search_provider2_complete_launch_search (
    LogsShellSearchProvider2 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void logs_shell_search_provider2_call_get_initial_result_set (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Terms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logs_shell_search_provider2_call_get_initial_result_set_finish (
    LogsShellSearchProvider2 *proxy,
    gchar ***out_Results,
    GAsyncResult *res,
    GError **error);

gboolean logs_shell_search_provider2_call_get_initial_result_set_sync (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Terms,
    gchar ***out_Results,
    GCancellable *cancellable,
    GError **error);

void logs_shell_search_provider2_call_get_subsearch_result_set (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_PreviousResults,
    const gchar *const *arg_Terms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logs_shell_search_provider2_call_get_subsearch_result_set_finish (
    LogsShellSearchProvider2 *proxy,
    gchar ***out_Results,
    GAsyncResult *res,
    GError **error);

gboolean logs_shell_search_provider2_call_get_subsearch_result_set_sync (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_PreviousResults,
    const gchar *const *arg_Terms,
    gchar ***out_Results,
    GCancellable *cancellable,
    GError **error);

void logs_shell_search_provider2_call_get_result_metas (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Results,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logs_shell_search_provider2_call_get_result_metas_finish (
    LogsShellSearchProvider2 *proxy,
    GVariant **out_Metas,
    GAsyncResult *res,
    GError **error);

gboolean logs_shell_search_provider2_call_get_result_metas_sync (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Results,
    GVariant **out_Metas,
    GCancellable *cancellable,
    GError **error);

void logs_shell_search_provider2_call_activate_result (
    LogsShellSearchProvider2 *proxy,
    const gchar *arg_Result,
    const gchar *const *arg_Terms,
    guint arg_Timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logs_shell_search_provider2_call_activate_result_finish (
    LogsShellSearchProvider2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logs_shell_search_provider2_call_activate_result_sync (
    LogsShellSearchProvider2 *proxy,
    const gchar *arg_Result,
    const gchar *const *arg_Terms,
    guint arg_Timestamp,
    GCancellable *cancellable,
    GError **error);

void logs_shell_search_provider2_call_launch_search (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Terms,
    guint arg_Timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logs_shell_search_provider2_call_launch_search_finish (
    LogsShellSearchProvider2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logs_shell_search_provider2_call_launch_search_sync (
    LogsShellSearchProvider2 *proxy,
    const gchar *const *arg_Terms,
    guint arg_Timestamp,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY (logs_shell_search_provider2_proxy_get_type ())
#define LOGS_SHELL_SEARCH_PROVIDER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY, LogsShellSearchProvider2Proxy))
#define LOGS_SHELL_SEARCH_PROVIDER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY, LogsShellSearchProvider2ProxyClass))
#define LOGS_SHELL_SEARCH_PROVIDER2_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY, LogsShellSearchProvider2ProxyClass))
#define LOGS_IS_SHELL_SEARCH_PROVIDER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY))
#define LOGS_IS_SHELL_SEARCH_PROVIDER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_PROXY))

typedef struct _LogsShellSearchProvider2Proxy LogsShellSearchProvider2Proxy;
typedef struct _LogsShellSearchProvider2ProxyClass LogsShellSearchProvider2ProxyClass;
typedef struct _LogsShellSearchProvider2ProxyPrivate LogsShellSearchProvider2ProxyPrivate;

struct _LogsShellSearchProvider2Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  LogsShellSearchProvider2ProxyPrivate *priv;
};

struct _LogsShellSearchProvider2ProxyClass
{
  GDBusProxyClass parent_class;
};

GType logs_shell_search_provider2_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LogsShellSearchProvider2Proxy, g_object_unref)
#endif

void logs_shell_search_provider2_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LogsShellSearchProvider2 *logs_shell_search_provider2_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
LogsShellSearchProvider2 *logs_shell_search_provider2_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void logs_shell_search_provider2_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LogsShellSearchProvider2 *logs_shell_search_provider2_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
LogsShellSearchProvider2 *logs_shell_search_provider2_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON (logs_shell_search_provider2_skeleton_get_type ())
#define LOGS_SHELL_SEARCH_PROVIDER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON, LogsShellSearchProvider2Skeleton))
#define LOGS_SHELL_SEARCH_PROVIDER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON, LogsShellSearchProvider2SkeletonClass))
#define LOGS_SHELL_SEARCH_PROVIDER2_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON, LogsShellSearchProvider2SkeletonClass))
#define LOGS_IS_SHELL_SEARCH_PROVIDER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON))
#define LOGS_IS_SHELL_SEARCH_PROVIDER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGS_TYPE_SHELL_SEARCH_PROVIDER2_SKELETON))

typedef struct _LogsShellSearchProvider2Skeleton LogsShellSearchProvider2Skeleton;
typedef struct _LogsShellSearchProvider2SkeletonClass LogsShellSearchProvider2SkeletonClass;
typedef struct _LogsShellSearchProvider2SkeletonPrivate LogsShellSearchProvider2SkeletonPrivate;

struct _LogsShellSearchProvider2Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  LogsShellSearchProvider2SkeletonPrivate *priv;
};

struct _LogsShellSearchProvider2SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType logs_shell_search_provider2_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LogsShellSearchProvider2Skeleton, g_object_unref)
#endif

LogsShellSearchProvider2 *logs_shell_search_provider2_skeleton_new (void);


G_END_DECLS

#endif /* __GL_SEARCH_PROVIDER_GENERATED_H__ */
